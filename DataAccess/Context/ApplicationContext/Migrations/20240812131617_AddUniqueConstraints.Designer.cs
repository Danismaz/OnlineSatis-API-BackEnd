// <auto-generated />
using System;
using DataAccess.Context.ApplicationContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DataAccess.Context.ApplicationContext.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240812131617_AddUniqueConstraints")]
    partial class AddUniqueConstraints
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Entities.Entites.Concrete.Company", b =>
                {
                    b.Property<long>("CompanyCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("CompanyCode"));

                    b.Property<string>("AuthorizedPerson")
                        .HasColumnType("text");

                    b.Property<string>("CompanyEmail")
                        .HasColumnType("text");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("CompanyPhone")
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("IdentityNumber")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("TaxId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("UserCode")
                        .HasColumnType("bigint");

                    b.HasKey("CompanyCode");

                    b.HasIndex("AuthorizedPerson")
                        .IsUnique();

                    b.HasIndex("IdentityNumber")
                        .IsUnique();

                    b.HasIndex("TaxId")
                        .IsUnique();

                    b.HasIndex("UserCode");

                    b.ToTable("Company");

                    b.HasData(
                        new
                        {
                            CompanyCode = 1L,
                            AuthorizedPerson = "Ahmet Yılmaz",
                            CompanyEmail = "info@kirtasiyemerkezi.com",
                            CompanyName = "Kırtasiye Merkezi",
                            CompanyPhone = "+905551234567",
                            CreatedDate = new DateTime(2024, 8, 12, 16, 16, 17, 280, DateTimeKind.Local).AddTicks(8826),
                            IdentityNumber = "98765432101",
                            Status = 1,
                            TaxId = "12345678901",
                            UserCode = 101L
                        },
                        new
                        {
                            CompanyCode = 2L,
                            AuthorizedPerson = "Mehmet Demir",
                            CompanyEmail = "info@ofismalzemeleri.com",
                            CompanyName = "Ofis Malzemeleri",
                            CompanyPhone = "+905551234568",
                            CreatedDate = new DateTime(2024, 8, 12, 16, 16, 17, 280, DateTimeKind.Local).AddTicks(8839),
                            IdentityNumber = "98765432102",
                            Status = 1,
                            TaxId = "12345678902",
                            UserCode = 102L
                        },
                        new
                        {
                            CompanyCode = 3L,
                            AuthorizedPerson = "Ayşe Kaya",
                            CompanyEmail = "info@kirtasiyedunyasi.com",
                            CompanyName = "Kırtasiye Dünyası",
                            CompanyPhone = "+905551234569",
                            CreatedDate = new DateTime(2024, 8, 12, 16, 16, 17, 280, DateTimeKind.Local).AddTicks(8841),
                            IdentityNumber = "98765432103",
                            Status = 1,
                            TaxId = "12345678903",
                            UserCode = 103L
                        },
                        new
                        {
                            CompanyCode = 4L,
                            AuthorizedPerson = "Ali Çelik",
                            CompanyEmail = "info@ofismerkezi.com",
                            CompanyName = "Ofis Merkezi",
                            CompanyPhone = "+905551234570",
                            CreatedDate = new DateTime(2024, 8, 12, 16, 16, 17, 280, DateTimeKind.Local).AddTicks(8842),
                            IdentityNumber = "98765432104",
                            Status = 1,
                            TaxId = "12345678904",
                            UserCode = 104L
                        },
                        new
                        {
                            CompanyCode = 5L,
                            AuthorizedPerson = "Fatma Yurt",
                            CompanyEmail = "info@kirtasiyevi.com",
                            CompanyName = "Kırtasiye Evi",
                            CompanyPhone = "+905551234571",
                            CreatedDate = new DateTime(2024, 8, 12, 16, 16, 17, 280, DateTimeKind.Local).AddTicks(8844),
                            IdentityNumber = "98765432105",
                            Status = 1,
                            TaxId = "12345678905",
                            UserCode = 105L
                        });
                });

            modelBuilder.Entity("Entities.Entites.Concrete.DailyForeignCurrencyPrice", b =>
                {
                    b.Property<long>("DailyForeignCurrencyPriceCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("DailyForeignCurrencyPriceCode"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("ForeignCurrencyCode")
                        .HasColumnType("bigint");

                    b.Property<decimal>("ForeignCurrencyPrice")
                        .HasColumnType("numeric");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("DailyForeignCurrencyPriceCode");

                    b.HasIndex("ForeignCurrencyCode");

                    b.ToTable("DailyForeignCurrencyPrice");

                    b.HasData(
                        new
                        {
                            DailyForeignCurrencyPriceCode = 1L,
                            CreatedDate = new DateTime(2024, 8, 12, 16, 16, 17, 280, DateTimeKind.Local).AddTicks(9169),
                            Date = new DateTime(2024, 8, 12, 16, 16, 17, 280, DateTimeKind.Local).AddTicks(9172),
                            ForeignCurrencyCode = 101L,
                            ForeignCurrencyPrice = 18.25m,
                            Status = 1
                        },
                        new
                        {
                            DailyForeignCurrencyPriceCode = 2L,
                            CreatedDate = new DateTime(2024, 8, 12, 16, 16, 17, 280, DateTimeKind.Local).AddTicks(9174),
                            Date = new DateTime(2024, 8, 12, 16, 16, 17, 280, DateTimeKind.Local).AddTicks(9175),
                            ForeignCurrencyCode = 102L,
                            ForeignCurrencyPrice = 7.55m,
                            Status = 1
                        },
                        new
                        {
                            DailyForeignCurrencyPriceCode = 3L,
                            CreatedDate = new DateTime(2024, 8, 12, 16, 16, 17, 280, DateTimeKind.Local).AddTicks(9176),
                            Date = new DateTime(2024, 8, 12, 16, 16, 17, 280, DateTimeKind.Local).AddTicks(9177),
                            ForeignCurrencyCode = 103L,
                            ForeignCurrencyPrice = 12.45m,
                            Status = 1
                        },
                        new
                        {
                            DailyForeignCurrencyPriceCode = 4L,
                            CreatedDate = new DateTime(2024, 8, 12, 16, 16, 17, 280, DateTimeKind.Local).AddTicks(9178),
                            Date = new DateTime(2024, 8, 12, 16, 16, 17, 280, DateTimeKind.Local).AddTicks(9179),
                            ForeignCurrencyCode = 104L,
                            ForeignCurrencyPrice = 0.85m,
                            Status = 1
                        },
                        new
                        {
                            DailyForeignCurrencyPriceCode = 5L,
                            CreatedDate = new DateTime(2024, 8, 12, 16, 16, 17, 280, DateTimeKind.Local).AddTicks(9180),
                            Date = new DateTime(2024, 8, 12, 16, 16, 17, 280, DateTimeKind.Local).AddTicks(9181),
                            ForeignCurrencyCode = 105L,
                            ForeignCurrencyPrice = 1.50m,
                            Status = 1
                        });
                });

            modelBuilder.Entity("Entities.Entites.Concrete.ForeignCurrency", b =>
                {
                    b.Property<long>("ForeignCurrencyCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ForeignCurrencyCode"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ForeignCurrencyLongName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("ForeignCurrencyCode");

                    b.HasIndex("ForeignCurrencyCode")
                        .IsUnique();

                    b.ToTable("ForeignCurrency");

                    b.HasData(
                        new
                        {
                            ForeignCurrencyCode = 101L,
                            CreatedDate = new DateTime(2024, 8, 12, 16, 16, 17, 280, DateTimeKind.Local).AddTicks(9322),
                            ForeignCurrencyLongName = "Amerikan Doları",
                            Status = 1
                        },
                        new
                        {
                            ForeignCurrencyCode = 102L,
                            CreatedDate = new DateTime(2024, 8, 12, 16, 16, 17, 280, DateTimeKind.Local).AddTicks(9323),
                            ForeignCurrencyLongName = "Euro",
                            Status = 1
                        },
                        new
                        {
                            ForeignCurrencyCode = 103L,
                            CreatedDate = new DateTime(2024, 8, 12, 16, 16, 17, 280, DateTimeKind.Local).AddTicks(9324),
                            ForeignCurrencyLongName = "İngiliz Sterlini",
                            Status = 1
                        },
                        new
                        {
                            ForeignCurrencyCode = 104L,
                            CreatedDate = new DateTime(2024, 8, 12, 16, 16, 17, 280, DateTimeKind.Local).AddTicks(9325),
                            ForeignCurrencyLongName = "İsviçre Frangı",
                            Status = 1
                        },
                        new
                        {
                            ForeignCurrencyCode = 105L,
                            CreatedDate = new DateTime(2024, 8, 12, 16, 16, 17, 280, DateTimeKind.Local).AddTicks(9326),
                            ForeignCurrencyLongName = "Japon Yeni",
                            Status = 1
                        });
                });

            modelBuilder.Entity("Entities.Entites.Concrete.Job", b =>
                {
                    b.Property<long>("JobCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("JobCode"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("JobDescription")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("JobName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<decimal>("JobPrice")
                        .HasColumnType("numeric");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("JobCode");

                    b.ToTable("Job");

                    b.HasData(
                        new
                        {
                            JobCode = 1L,
                            CreatedDate = new DateTime(2024, 8, 12, 16, 16, 17, 280, DateTimeKind.Local).AddTicks(9459),
                            JobDescription = "Ofis temizliği",
                            JobName = "Temizlik",
                            JobPrice = 150.00m,
                            Status = 1
                        },
                        new
                        {
                            JobCode = 2L,
                            CreatedDate = new DateTime(2024, 8, 12, 16, 16, 17, 280, DateTimeKind.Local).AddTicks(9461),
                            JobDescription = "Kargo gönderimi",
                            JobName = "Kargo",
                            JobPrice = 50.00m,
                            Status = 1
                        },
                        new
                        {
                            JobCode = 3L,
                            CreatedDate = new DateTime(2024, 8, 12, 16, 16, 17, 280, DateTimeKind.Local).AddTicks(9462),
                            JobDescription = "Boya işçilik hizmeti",
                            JobName = "Boya",
                            JobPrice = 200.00m,
                            Status = 1
                        },
                        new
                        {
                            JobCode = 4L,
                            CreatedDate = new DateTime(2024, 8, 12, 16, 16, 17, 280, DateTimeKind.Local).AddTicks(9464),
                            JobDescription = "Ekipman montajı",
                            JobName = "Montaj",
                            JobPrice = 100.00m,
                            Status = 1
                        },
                        new
                        {
                            JobCode = 5L,
                            CreatedDate = new DateTime(2024, 8, 12, 16, 16, 17, 280, DateTimeKind.Local).AddTicks(9469),
                            JobDescription = "Bakım ve onarım",
                            JobName = "Bakım",
                            JobPrice = 80.00m,
                            Status = 1
                        });
                });

            modelBuilder.Entity("Entities.Entites.Concrete.Machine", b =>
                {
                    b.Property<long>("MachineCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("MachineCode"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("MachineName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("MachineCode");

                    b.ToTable("Machine");

                    b.HasData(
                        new
                        {
                            MachineCode = 1L,
                            CreatedDate = new DateTime(2024, 8, 12, 16, 16, 17, 280, DateTimeKind.Local).AddTicks(9696),
                            MachineName = "Yazıcı",
                            Status = 1
                        },
                        new
                        {
                            MachineCode = 2L,
                            CreatedDate = new DateTime(2024, 8, 12, 16, 16, 17, 280, DateTimeKind.Local).AddTicks(9698),
                            MachineName = "Faks Makinesi",
                            Status = 1
                        },
                        new
                        {
                            MachineCode = 3L,
                            CreatedDate = new DateTime(2024, 8, 12, 16, 16, 17, 280, DateTimeKind.Local).AddTicks(9699),
                            MachineName = "Kopya Makinesi",
                            Status = 1
                        },
                        new
                        {
                            MachineCode = 4L,
                            CreatedDate = new DateTime(2024, 8, 12, 16, 16, 17, 280, DateTimeKind.Local).AddTicks(9700),
                            MachineName = "Laminatör",
                            Status = 1
                        },
                        new
                        {
                            MachineCode = 5L,
                            CreatedDate = new DateTime(2024, 8, 12, 16, 16, 17, 280, DateTimeKind.Local).AddTicks(9701),
                            MachineName = "Zımba Makinesi",
                            Status = 1
                        });
                });

            modelBuilder.Entity("Entities.Entites.Concrete.Role", b =>
                {
                    b.Property<string>("RoleCode")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("RoleDescription")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("RoleCode");

                    b.HasIndex("RoleCode")
                        .IsUnique();

                    b.ToTable("Role");

                    b.HasData(
                        new
                        {
                            RoleCode = "ADMIN",
                            CreatedDate = new DateTime(2024, 8, 12, 16, 16, 17, 280, DateTimeKind.Local).AddTicks(9838),
                            RoleDescription = "Sistem yöneticisi",
                            Status = 1
                        },
                        new
                        {
                            RoleCode = "MANAGER",
                            CreatedDate = new DateTime(2024, 8, 12, 16, 16, 17, 280, DateTimeKind.Local).AddTicks(9839),
                            RoleDescription = "Yönetici",
                            Status = 1
                        },
                        new
                        {
                            RoleCode = "STAFF",
                            CreatedDate = new DateTime(2024, 8, 12, 16, 16, 17, 280, DateTimeKind.Local).AddTicks(9840),
                            RoleDescription = "Personel",
                            Status = 1
                        },
                        new
                        {
                            RoleCode = "ACCOUNTANT",
                            CreatedDate = new DateTime(2024, 8, 12, 16, 16, 17, 280, DateTimeKind.Local).AddTicks(9840),
                            RoleDescription = "Muhasebeci",
                            Status = 1
                        },
                        new
                        {
                            RoleCode = "SUPPORT",
                            CreatedDate = new DateTime(2024, 8, 12, 16, 16, 17, 280, DateTimeKind.Local).AddTicks(9841),
                            RoleDescription = "Destek personeli",
                            Status = 1
                        });
                });

            modelBuilder.Entity("Entities.Entites.Concrete.User", b =>
                {
                    b.Property<long>("UserCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("UserCode"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MobilePhone")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("UserTypeCode")
                        .HasColumnType("bigint");

                    b.HasKey("UserCode");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("MobilePhone")
                        .IsUnique();

                    b.HasIndex("UserTypeCode");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            UserCode = 101L,
                            CreatedDate = new DateTime(2024, 8, 12, 16, 16, 17, 281, DateTimeKind.Local).AddTicks(1400),
                            Email = "john.doe@example.com",
                            MobilePhone = "+905551234567",
                            PasswordHash = new byte[] { 197, 2, 108, 207, 142, 53, 39, 93, 180, 11, 123, 137, 61, 231, 122, 28, 216, 18, 238, 87, 7, 22, 240, 82, 235, 120, 34, 163, 174, 180, 86, 91, 73, 129, 35, 84, 108, 231, 113, 87, 111, 81, 255, 96, 233, 212, 132, 191, 212, 8, 190, 184, 51, 155, 177, 30, 47, 131, 244, 180, 176, 233, 73, 0 },
                            PasswordSalt = new byte[] { 241, 34, 201, 249, 221, 47, 99, 90, 170, 14, 155, 22, 96, 233, 56, 222 },
                            Status = 1,
                            UserTypeCode = 1L
                        },
                        new
                        {
                            UserCode = 102L,
                            CreatedDate = new DateTime(2024, 8, 12, 16, 16, 17, 281, DateTimeKind.Local).AddTicks(1402),
                            Email = "jane.doe@example.com",
                            MobilePhone = "+905551234568",
                            PasswordHash = new byte[] { 197, 2, 108, 207, 142, 53, 39, 93, 180, 11, 123, 137, 61, 231, 122, 28, 216, 18, 238, 87, 7, 22, 240, 82, 235, 120, 34, 163, 174, 180, 86, 91, 73, 129, 35, 84, 108, 231, 113, 87, 111, 81, 255, 96, 233, 212, 132, 191, 212, 8, 190, 184, 51, 155, 177, 30, 47, 131, 244, 180, 176, 233, 73, 0 },
                            PasswordSalt = new byte[] { 241, 34, 201, 249, 221, 47, 99, 90, 170, 14, 155, 22, 96, 233, 56, 222 },
                            Status = 1,
                            UserTypeCode = 2L
                        },
                        new
                        {
                            UserCode = 103L,
                            CreatedDate = new DateTime(2024, 8, 12, 16, 16, 17, 281, DateTimeKind.Local).AddTicks(1404),
                            Email = "alice.smith@example.com",
                            MobilePhone = "+905551234569",
                            PasswordHash = new byte[] { 197, 2, 108, 207, 142, 53, 39, 93, 180, 11, 123, 137, 61, 231, 122, 28, 216, 18, 238, 87, 7, 22, 240, 82, 235, 120, 34, 163, 174, 180, 86, 91, 73, 129, 35, 84, 108, 231, 113, 87, 111, 81, 255, 96, 233, 212, 132, 191, 212, 8, 190, 184, 51, 155, 177, 30, 47, 131, 244, 180, 176, 233, 73, 0 },
                            PasswordSalt = new byte[] { 241, 34, 201, 249, 221, 47, 99, 90, 170, 14, 155, 22, 96, 233, 56, 222 },
                            Status = 1,
                            UserTypeCode = 3L
                        },
                        new
                        {
                            UserCode = 104L,
                            CreatedDate = new DateTime(2024, 8, 12, 16, 16, 17, 281, DateTimeKind.Local).AddTicks(1405),
                            Email = "bob.johnson@example.com",
                            MobilePhone = "+905551234570",
                            PasswordHash = new byte[] { 197, 2, 108, 207, 142, 53, 39, 93, 180, 11, 123, 137, 61, 231, 122, 28, 216, 18, 238, 87, 7, 22, 240, 82, 235, 120, 34, 163, 174, 180, 86, 91, 73, 129, 35, 84, 108, 231, 113, 87, 111, 81, 255, 96, 233, 212, 132, 191, 212, 8, 190, 184, 51, 155, 177, 30, 47, 131, 244, 180, 176, 233, 73, 0 },
                            PasswordSalt = new byte[] { 241, 34, 201, 249, 221, 47, 99, 90, 170, 14, 155, 22, 96, 233, 56, 222 },
                            Status = 1,
                            UserTypeCode = 4L
                        },
                        new
                        {
                            UserCode = 105L,
                            CreatedDate = new DateTime(2024, 8, 12, 16, 16, 17, 281, DateTimeKind.Local).AddTicks(1406),
                            Email = "carol.davis@example.com",
                            MobilePhone = "+905551234571",
                            PasswordHash = new byte[] { 197, 2, 108, 207, 142, 53, 39, 93, 180, 11, 123, 137, 61, 231, 122, 28, 216, 18, 238, 87, 7, 22, 240, 82, 235, 120, 34, 163, 174, 180, 86, 91, 73, 129, 35, 84, 108, 231, 113, 87, 111, 81, 255, 96, 233, 212, 132, 191, 212, 8, 190, 184, 51, 155, 177, 30, 47, 131, 244, 180, 176, 233, 73, 0 },
                            PasswordSalt = new byte[] { 241, 34, 201, 249, 221, 47, 99, 90, 170, 14, 155, 22, 96, 233, 56, 222 },
                            Status = 1,
                            UserTypeCode = 5L
                        });
                });

            modelBuilder.Entity("Entities.Entites.Concrete.UserDetail", b =>
                {
                    b.Property<long>("UserDetailCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("UserDetailCode"));

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IdentityNumber")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("character varying(11)");

                    b.Property<string>("MobilePhone")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("UserCode")
                        .HasColumnType("bigint");

                    b.HasKey("UserDetailCode");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("IdentityNumber")
                        .IsUnique();

                    b.HasIndex("UserCode")
                        .IsUnique();

                    b.ToTable("UserDetail");

                    b.HasData(
                        new
                        {
                            UserDetailCode = 1L,
                            BirthDate = new DateTime(1990, 6, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2024, 8, 12, 16, 16, 17, 281, DateTimeKind.Local).AddTicks(27),
                            Email = "ahmet.yilmaz@kirtasiyemerkezi.com",
                            IdentityNumber = "98765432101",
                            MobilePhone = "+905551234567",
                            Name = "Ahmet",
                            Status = 1,
                            Surname = "Yılmaz",
                            UserCode = 101L
                        },
                        new
                        {
                            UserDetailCode = 2L,
                            BirthDate = new DateTime(1990, 6, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2024, 8, 12, 16, 16, 17, 281, DateTimeKind.Local).AddTicks(33),
                            Email = "mehmet.demir@ofismalzemeleri.com",
                            IdentityNumber = "98765432102",
                            MobilePhone = "+905551234568",
                            Name = "Mehmet",
                            Status = 1,
                            Surname = "Demir",
                            UserCode = 102L
                        },
                        new
                        {
                            UserDetailCode = 3L,
                            BirthDate = new DateTime(1990, 6, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2024, 8, 12, 16, 16, 17, 281, DateTimeKind.Local).AddTicks(35),
                            Email = "ayse.kaya@kirtasiyedunyasi.com",
                            IdentityNumber = "98765432103",
                            MobilePhone = "+905551234569",
                            Name = "Ayşe",
                            Status = 1,
                            Surname = "Kaya",
                            UserCode = 103L
                        },
                        new
                        {
                            UserDetailCode = 4L,
                            BirthDate = new DateTime(1990, 6, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2024, 8, 12, 16, 16, 17, 281, DateTimeKind.Local).AddTicks(36),
                            Email = "ali.celik@ofismerkezi.com",
                            IdentityNumber = "98765432104",
                            MobilePhone = "+905551234570",
                            Name = "Ali",
                            Status = 1,
                            Surname = "Çelik",
                            UserCode = 104L
                        },
                        new
                        {
                            UserDetailCode = 5L,
                            BirthDate = new DateTime(1990, 6, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2024, 8, 12, 16, 16, 17, 281, DateTimeKind.Local).AddTicks(38),
                            Email = "fatma.yurt@kirtasiyevi.com",
                            IdentityNumber = "98765432105",
                            MobilePhone = "+905551234571",
                            Name = "Fatma",
                            Status = 1,
                            Surname = "Yurt",
                            UserCode = 105L
                        });
                });

            modelBuilder.Entity("Entities.Entites.Concrete.UserJob", b =>
                {
                    b.Property<long>("UserJobCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("UserJobCode"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("JobCode")
                        .HasColumnType("bigint");

                    b.Property<decimal?>("JobPriceWithSpecialDiscount")
                        .HasColumnType("numeric");

                    b.Property<int>("Piece")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("UserCode")
                        .HasColumnType("bigint");

                    b.HasKey("UserJobCode");

                    b.HasIndex("JobCode");

                    b.HasIndex("UserCode");

                    b.ToTable("UserJob");

                    b.HasData(
                        new
                        {
                            UserJobCode = 1L,
                            CreatedDate = new DateTime(2024, 8, 12, 16, 16, 17, 281, DateTimeKind.Local).AddTicks(176),
                            Date = new DateTime(2024, 8, 12, 16, 16, 17, 281, DateTimeKind.Local).AddTicks(177),
                            JobCode = 1L,
                            JobPriceWithSpecialDiscount = 135.00m,
                            Piece = 10,
                            Status = 1,
                            UserCode = 101L
                        },
                        new
                        {
                            UserJobCode = 2L,
                            CreatedDate = new DateTime(2024, 8, 12, 16, 16, 17, 281, DateTimeKind.Local).AddTicks(180),
                            Date = new DateTime(2024, 8, 12, 16, 16, 17, 281, DateTimeKind.Local).AddTicks(180),
                            JobCode = 2L,
                            JobPriceWithSpecialDiscount = 45.00m,
                            Piece = 5,
                            Status = 1,
                            UserCode = 102L
                        },
                        new
                        {
                            UserJobCode = 3L,
                            CreatedDate = new DateTime(2024, 8, 12, 16, 16, 17, 281, DateTimeKind.Local).AddTicks(182),
                            Date = new DateTime(2024, 8, 12, 16, 16, 17, 281, DateTimeKind.Local).AddTicks(183),
                            JobCode = 3L,
                            JobPriceWithSpecialDiscount = 180.00m,
                            Piece = 2,
                            Status = 1,
                            UserCode = 103L
                        },
                        new
                        {
                            UserJobCode = 4L,
                            CreatedDate = new DateTime(2024, 8, 12, 16, 16, 17, 281, DateTimeKind.Local).AddTicks(184),
                            Date = new DateTime(2024, 8, 12, 16, 16, 17, 281, DateTimeKind.Local).AddTicks(185),
                            JobCode = 4L,
                            JobPriceWithSpecialDiscount = 90.00m,
                            Piece = 7,
                            Status = 1,
                            UserCode = 104L
                        },
                        new
                        {
                            UserJobCode = 5L,
                            CreatedDate = new DateTime(2024, 8, 12, 16, 16, 17, 281, DateTimeKind.Local).AddTicks(186),
                            Date = new DateTime(2024, 8, 12, 16, 16, 17, 281, DateTimeKind.Local).AddTicks(187),
                            JobCode = 5L,
                            JobPriceWithSpecialDiscount = 70.00m,
                            Piece = 15,
                            Status = 1,
                            UserCode = 105L
                        });
                });

            modelBuilder.Entity("Entities.Entites.Concrete.UserRole", b =>
                {
                    b.Property<long>("UserRoleCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("UserRoleCode"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("RoleCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("UserCode")
                        .HasColumnType("bigint");

                    b.HasKey("UserRoleCode");

                    b.HasIndex("RoleCode");

                    b.HasIndex("UserCode");

                    b.ToTable("UserRole");

                    b.HasData(
                        new
                        {
                            UserRoleCode = 1L,
                            CreatedDate = new DateTime(2024, 8, 12, 16, 16, 17, 281, DateTimeKind.Local).AddTicks(298),
                            RoleCode = "ADMIN",
                            Status = 1,
                            UserCode = 101L
                        },
                        new
                        {
                            UserRoleCode = 2L,
                            CreatedDate = new DateTime(2024, 8, 12, 16, 16, 17, 281, DateTimeKind.Local).AddTicks(299),
                            RoleCode = "MANAGER",
                            Status = 1,
                            UserCode = 102L
                        },
                        new
                        {
                            UserRoleCode = 3L,
                            CreatedDate = new DateTime(2024, 8, 12, 16, 16, 17, 281, DateTimeKind.Local).AddTicks(300),
                            RoleCode = "STAFF",
                            Status = 1,
                            UserCode = 103L
                        },
                        new
                        {
                            UserRoleCode = 4L,
                            CreatedDate = new DateTime(2024, 8, 12, 16, 16, 17, 281, DateTimeKind.Local).AddTicks(301),
                            RoleCode = "ACCOUNTANT",
                            Status = 1,
                            UserCode = 104L
                        },
                        new
                        {
                            UserRoleCode = 5L,
                            CreatedDate = new DateTime(2024, 8, 12, 16, 16, 17, 281, DateTimeKind.Local).AddTicks(302),
                            RoleCode = "SUPPORT",
                            Status = 1,
                            UserCode = 105L
                        });
                });

            modelBuilder.Entity("Entities.Entites.Concrete.UserType", b =>
                {
                    b.Property<long>("UserTypeCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("UserTypeCode"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UserTypeDescription")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("UserTypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("UserTypeCode");

                    b.ToTable("UserType");

                    b.HasData(
                        new
                        {
                            UserTypeCode = 1L,
                            CreatedDate = new DateTime(2024, 8, 12, 16, 16, 17, 281, DateTimeKind.Local).AddTicks(1572),
                            Status = 1,
                            UserTypeDescription = "Sistem yöneticisi",
                            UserTypeName = "Admin"
                        },
                        new
                        {
                            UserTypeCode = 2L,
                            CreatedDate = new DateTime(2024, 8, 12, 16, 16, 17, 281, DateTimeKind.Local).AddTicks(1574),
                            Status = 1,
                            UserTypeDescription = "Yönetici",
                            UserTypeName = "Manager"
                        },
                        new
                        {
                            UserTypeCode = 3L,
                            CreatedDate = new DateTime(2024, 8, 12, 16, 16, 17, 281, DateTimeKind.Local).AddTicks(1574),
                            Status = 1,
                            UserTypeDescription = "Personel",
                            UserTypeName = "Staff"
                        },
                        new
                        {
                            UserTypeCode = 4L,
                            CreatedDate = new DateTime(2024, 8, 12, 16, 16, 17, 281, DateTimeKind.Local).AddTicks(1575),
                            Status = 1,
                            UserTypeDescription = "Muhasebeci",
                            UserTypeName = "Accountant"
                        },
                        new
                        {
                            UserTypeCode = 5L,
                            CreatedDate = new DateTime(2024, 8, 12, 16, 16, 17, 281, DateTimeKind.Local).AddTicks(1576),
                            Status = 1,
                            UserTypeDescription = "Destek personeli",
                            UserTypeName = "Support"
                        });
                });

            modelBuilder.Entity("Entities.Entites.Concrete.Company", b =>
                {
                    b.HasOne("Entities.Entites.Concrete.User", "User")
                        .WithMany("Companies")
                        .HasForeignKey("UserCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.Entites.Concrete.DailyForeignCurrencyPrice", b =>
                {
                    b.HasOne("Entities.Entites.Concrete.ForeignCurrency", "ForeignCurrency")
                        .WithMany("DailyForeignCurrencyPrices")
                        .HasForeignKey("ForeignCurrencyCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ForeignCurrency");
                });

            modelBuilder.Entity("Entities.Entites.Concrete.User", b =>
                {
                    b.HasOne("Entities.Entites.Concrete.UserType", "UserType")
                        .WithMany("Users")
                        .HasForeignKey("UserTypeCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserType");
                });

            modelBuilder.Entity("Entities.Entites.Concrete.UserDetail", b =>
                {
                    b.HasOne("Entities.Entites.Concrete.User", "User")
                        .WithOne("UserDetail")
                        .HasForeignKey("Entities.Entites.Concrete.UserDetail", "UserCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.Entites.Concrete.UserJob", b =>
                {
                    b.HasOne("Entities.Entites.Concrete.Job", "Job")
                        .WithMany("UserJobs")
                        .HasForeignKey("JobCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Entites.Concrete.User", "User")
                        .WithMany("UserJobs")
                        .HasForeignKey("UserCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Job");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.Entites.Concrete.UserRole", b =>
                {
                    b.HasOne("Entities.Entites.Concrete.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Entites.Concrete.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.Entites.Concrete.ForeignCurrency", b =>
                {
                    b.Navigation("DailyForeignCurrencyPrices");
                });

            modelBuilder.Entity("Entities.Entites.Concrete.Job", b =>
                {
                    b.Navigation("UserJobs");
                });

            modelBuilder.Entity("Entities.Entites.Concrete.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Entities.Entites.Concrete.User", b =>
                {
                    b.Navigation("Companies");

                    b.Navigation("UserDetail")
                        .IsRequired();

                    b.Navigation("UserJobs");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Entities.Entites.Concrete.UserType", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
