// <auto-generated />
using System;
using DataAccess.Context.ApplicationContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DataAccess.Context.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240930124335_AddedTables")]
    partial class AddedTables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Entities.Concrete.Category", b =>
                {
                    b.Property<long>("CategoryCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("CategoryCode"));

                    b.Property<string>("CategoryDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("CategoryCode");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("Entities.Concrete.Order", b =>
                {
                    b.Property<long>("OrderCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("OrderCode"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("ShipperCode")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("UserCode")
                        .HasColumnType("bigint");

                    b.HasKey("OrderCode");

                    b.HasIndex("ShipperCode");

                    b.HasIndex("UserCode");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("Entities.Concrete.OrderDetail", b =>
                {
                    b.Property<long>("OrderDetailCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("OrderDetailCode"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("OrderCode")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("OrderDetailCode");

                    b.HasIndex("OrderCode");

                    b.ToTable("OrderDetail");
                });

            modelBuilder.Entity("Entities.Concrete.Product", b =>
                {
                    b.Property<long>("ProductCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ProductCode"));

                    b.Property<long>("CategoryCode")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("OrderDetailCode")
                        .HasColumnType("bigint");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<decimal>("ProductPrice")
                        .HasColumnType("numeric");

                    b.Property<int?>("ShipperCode")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("Stock")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("ProductCode");

                    b.HasIndex("CategoryCode");

                    b.HasIndex("OrderDetailCode");

                    b.HasIndex("ShipperCode");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("Entities.Concrete.Shipper", b =>
                {
                    b.Property<int>("ShipperCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ShipperCode"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DeliveryTime")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<string>("ShipperName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("ShipperCode");

                    b.ToTable("Shipper");
                });

            modelBuilder.Entity("Entities.Entites.Concrete.User", b =>
                {
                    b.Property<long>("UserCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("UserCode"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MobilePhone")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("UserRoleCode")
                        .HasColumnType("bigint");

                    b.HasKey("UserCode");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("MobilePhone")
                        .IsUnique();

                    b.HasIndex("UserRoleCode");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            UserCode = 101L,
                            CreatedDate = new DateTime(2024, 9, 30, 15, 43, 35, 296, DateTimeKind.Local).AddTicks(1580),
                            Email = "john.doe@example.com",
                            MobilePhone = "+905551234567",
                            PasswordHash = new byte[] { 59, 83, 1, 234, 98, 155, 251, 6, 38, 28, 169, 219, 41, 110, 166, 66, 91, 153, 203, 90, 74, 201, 165, 248, 42, 18, 215, 122, 141, 79, 107, 87, 241, 172, 195, 121, 181, 84, 77, 41, 33, 5, 212, 161, 119, 235, 147, 88, 180, 84, 255, 134, 84, 56, 116, 245, 153, 161, 210, 119, 96, 38, 9, 229 },
                            PasswordSalt = new byte[] { 51, 64, 7, 22, 84, 123, 66, 147, 250, 214, 176, 75, 104, 67, 104, 137 },
                            Status = 1,
                            TwoFactorEnabled = false,
                            UserRoleCode = 1L
                        },
                        new
                        {
                            UserCode = 102L,
                            CreatedDate = new DateTime(2024, 9, 30, 15, 43, 35, 296, DateTimeKind.Local).AddTicks(1580),
                            Email = "jane.doe@example.com",
                            MobilePhone = "+905551234568",
                            PasswordHash = new byte[] { 59, 83, 1, 234, 98, 155, 251, 6, 38, 28, 169, 219, 41, 110, 166, 66, 91, 153, 203, 90, 74, 201, 165, 248, 42, 18, 215, 122, 141, 79, 107, 87, 241, 172, 195, 121, 181, 84, 77, 41, 33, 5, 212, 161, 119, 235, 147, 88, 180, 84, 255, 134, 84, 56, 116, 245, 153, 161, 210, 119, 96, 38, 9, 229 },
                            PasswordSalt = new byte[] { 51, 64, 7, 22, 84, 123, 66, 147, 250, 214, 176, 75, 104, 67, 104, 137 },
                            Status = 1,
                            TwoFactorEnabled = false,
                            UserRoleCode = 2L
                        },
                        new
                        {
                            UserCode = 103L,
                            CreatedDate = new DateTime(2024, 9, 30, 15, 43, 35, 296, DateTimeKind.Local).AddTicks(1580),
                            Email = "alice.smith@example.com",
                            MobilePhone = "+905551234569",
                            PasswordHash = new byte[] { 59, 83, 1, 234, 98, 155, 251, 6, 38, 28, 169, 219, 41, 110, 166, 66, 91, 153, 203, 90, 74, 201, 165, 248, 42, 18, 215, 122, 141, 79, 107, 87, 241, 172, 195, 121, 181, 84, 77, 41, 33, 5, 212, 161, 119, 235, 147, 88, 180, 84, 255, 134, 84, 56, 116, 245, 153, 161, 210, 119, 96, 38, 9, 229 },
                            PasswordSalt = new byte[] { 51, 64, 7, 22, 84, 123, 66, 147, 250, 214, 176, 75, 104, 67, 104, 137 },
                            Status = 1,
                            TwoFactorEnabled = false,
                            UserRoleCode = 3L
                        },
                        new
                        {
                            UserCode = 104L,
                            CreatedDate = new DateTime(2024, 9, 30, 15, 43, 35, 296, DateTimeKind.Local).AddTicks(1580),
                            Email = "bob.johnson@example.com",
                            MobilePhone = "+905551234570",
                            PasswordHash = new byte[] { 59, 83, 1, 234, 98, 155, 251, 6, 38, 28, 169, 219, 41, 110, 166, 66, 91, 153, 203, 90, 74, 201, 165, 248, 42, 18, 215, 122, 141, 79, 107, 87, 241, 172, 195, 121, 181, 84, 77, 41, 33, 5, 212, 161, 119, 235, 147, 88, 180, 84, 255, 134, 84, 56, 116, 245, 153, 161, 210, 119, 96, 38, 9, 229 },
                            PasswordSalt = new byte[] { 51, 64, 7, 22, 84, 123, 66, 147, 250, 214, 176, 75, 104, 67, 104, 137 },
                            Status = 1,
                            TwoFactorEnabled = false,
                            UserRoleCode = 3L
                        },
                        new
                        {
                            UserCode = 105L,
                            CreatedDate = new DateTime(2024, 9, 30, 15, 43, 35, 296, DateTimeKind.Local).AddTicks(1590),
                            Email = "carol.davis@example.com",
                            MobilePhone = "+905551234571",
                            PasswordHash = new byte[] { 59, 83, 1, 234, 98, 155, 251, 6, 38, 28, 169, 219, 41, 110, 166, 66, 91, 153, 203, 90, 74, 201, 165, 248, 42, 18, 215, 122, 141, 79, 107, 87, 241, 172, 195, 121, 181, 84, 77, 41, 33, 5, 212, 161, 119, 235, 147, 88, 180, 84, 255, 134, 84, 56, 116, 245, 153, 161, 210, 119, 96, 38, 9, 229 },
                            PasswordSalt = new byte[] { 51, 64, 7, 22, 84, 123, 66, 147, 250, 214, 176, 75, 104, 67, 104, 137 },
                            Status = 1,
                            TwoFactorEnabled = false,
                            UserRoleCode = 3L
                        });
                });

            modelBuilder.Entity("Entities.Entites.Concrete.UserDetail", b =>
                {
                    b.Property<long>("UserDetailCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("UserDetailCode"));

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IdentityNumber")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("character varying(11)");

                    b.Property<string>("MobilePhone")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("UserCode")
                        .HasColumnType("bigint");

                    b.HasKey("UserDetailCode");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("IdentityNumber")
                        .IsUnique();

                    b.HasIndex("UserCode")
                        .IsUnique();

                    b.ToTable("UserDetail");

                    b.HasData(
                        new
                        {
                            UserDetailCode = 1L,
                            BirthDate = new DateTime(1990, 6, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2024, 9, 30, 15, 43, 35, 296, DateTimeKind.Local).AddTicks(900),
                            Email = "ahmet.yilmaz@kirtasiyemerkezi.com",
                            IdentityNumber = "98765432101",
                            MobilePhone = "+905551234567",
                            Name = "Ahmet",
                            Status = 1,
                            Surname = "Yılmaz",
                            UserCode = 101L
                        },
                        new
                        {
                            UserDetailCode = 2L,
                            BirthDate = new DateTime(1990, 6, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2024, 9, 30, 15, 43, 35, 296, DateTimeKind.Local).AddTicks(930),
                            Email = "mehmet.demir@ofismalzemeleri.com",
                            IdentityNumber = "98765432102",
                            MobilePhone = "+905551234568",
                            Name = "Mehmet",
                            Status = 1,
                            Surname = "Demir",
                            UserCode = 102L
                        },
                        new
                        {
                            UserDetailCode = 3L,
                            BirthDate = new DateTime(1990, 6, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2024, 9, 30, 15, 43, 35, 296, DateTimeKind.Local).AddTicks(940),
                            Email = "ayse.kaya@kirtasiyedunyasi.com",
                            IdentityNumber = "98765432103",
                            MobilePhone = "+905551234569",
                            Name = "Ayşe",
                            Status = 1,
                            Surname = "Kaya",
                            UserCode = 103L
                        },
                        new
                        {
                            UserDetailCode = 4L,
                            BirthDate = new DateTime(1990, 6, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2024, 9, 30, 15, 43, 35, 296, DateTimeKind.Local).AddTicks(940),
                            Email = "ali.celik@ofismerkezi.com",
                            IdentityNumber = "98765432104",
                            MobilePhone = "+905551234570",
                            Name = "Ali",
                            Status = 1,
                            Surname = "Çelik",
                            UserCode = 104L
                        },
                        new
                        {
                            UserDetailCode = 5L,
                            BirthDate = new DateTime(1990, 6, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2024, 9, 30, 15, 43, 35, 296, DateTimeKind.Local).AddTicks(940),
                            Email = "fatma.yurt@kirtasiyevi.com",
                            IdentityNumber = "98765432105",
                            MobilePhone = "+905551234571",
                            Name = "Fatma",
                            Status = 1,
                            Surname = "Yurt",
                            UserCode = 105L
                        });
                });

            modelBuilder.Entity("Entities.Entites.Concrete.UserRole", b =>
                {
                    b.Property<long>("UserRoleCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("UserRoleCode"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("RoleDescription")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("UserCode")
                        .HasColumnType("bigint");

                    b.HasKey("UserRoleCode");

                    b.HasIndex("UserCode");

                    b.ToTable("UserRole");

                    b.HasData(
                        new
                        {
                            UserRoleCode = 1L,
                            CreatedDate = new DateTime(2024, 9, 30, 15, 43, 35, 296, DateTimeKind.Local).AddTicks(1030),
                            RoleDescription = "Admin",
                            Status = 1
                        },
                        new
                        {
                            UserRoleCode = 2L,
                            CreatedDate = new DateTime(2024, 9, 30, 15, 43, 35, 296, DateTimeKind.Local).AddTicks(1040),
                            RoleDescription = "Yönetici",
                            Status = 1
                        },
                        new
                        {
                            UserRoleCode = 3L,
                            CreatedDate = new DateTime(2024, 9, 30, 15, 43, 35, 296, DateTimeKind.Local).AddTicks(1040),
                            RoleDescription = "Kullanici",
                            Status = 1
                        });
                });

            modelBuilder.Entity("Entities.Concrete.Order", b =>
                {
                    b.HasOne("Entities.Concrete.Shipper", "Shipper")
                        .WithMany("Orders")
                        .HasForeignKey("ShipperCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Entites.Concrete.User", "User")
                        .WithMany()
                        .HasForeignKey("UserCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Shipper");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.Concrete.OrderDetail", b =>
                {
                    b.HasOne("Entities.Concrete.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Entities.Concrete.Product", b =>
                {
                    b.HasOne("Entities.Concrete.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Concrete.OrderDetail", null)
                        .WithMany("Products")
                        .HasForeignKey("OrderDetailCode");

                    b.HasOne("Entities.Concrete.Shipper", null)
                        .WithMany("Products")
                        .HasForeignKey("ShipperCode");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Entities.Entites.Concrete.User", b =>
                {
                    b.HasOne("Entities.Entites.Concrete.UserRole", "UserRole")
                        .WithMany("Users")
                        .HasForeignKey("UserRoleCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserRole");
                });

            modelBuilder.Entity("Entities.Entites.Concrete.UserDetail", b =>
                {
                    b.HasOne("Entities.Entites.Concrete.User", "User")
                        .WithOne("UserDetail")
                        .HasForeignKey("Entities.Entites.Concrete.UserDetail", "UserCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.Entites.Concrete.UserRole", b =>
                {
                    b.HasOne("Entities.Entites.Concrete.User", null)
                        .WithMany("UserRoles")
                        .HasForeignKey("UserCode");
                });

            modelBuilder.Entity("Entities.Concrete.OrderDetail", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Entities.Concrete.Shipper", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("Entities.Entites.Concrete.User", b =>
                {
                    b.Navigation("UserDetail")
                        .IsRequired();

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Entities.Entites.Concrete.UserRole", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
