// <auto-generated />
using System;
using DataAccess.Context.ApplicationContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Entities.Concrete.Category", b =>
                {
                    b.Property<long>("CategoryCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("CategoryCode"));

                    b.Property<string>("CategoryDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("CategoryCode");

                    b.ToTable("Category");

                    b.HasData(
                        new
                        {
                            CategoryCode = 1L,
                            CategoryDescription = "Farklı türde kalemler.",
                            CategoryName = "Kalemler",
                            CreatedDate = new DateTime(2024, 9, 30, 19, 15, 52, 397, DateTimeKind.Local).AddTicks(4361),
                            Status = 1
                        },
                        new
                        {
                            CategoryCode = 2L,
                            CategoryDescription = "Çeşitli defter türleri.",
                            CategoryName = "Defterler",
                            CreatedDate = new DateTime(2024, 9, 30, 19, 15, 52, 397, DateTimeKind.Local).AddTicks(4363),
                            Status = 1
                        },
                        new
                        {
                            CategoryCode = 3L,
                            CategoryDescription = "Ofis için gerekli malzemeler.",
                            CategoryName = "Ofis Malzemeleri",
                            CreatedDate = new DateTime(2024, 9, 30, 19, 15, 52, 397, DateTimeKind.Local).AddTicks(4364),
                            Status = 1
                        },
                        new
                        {
                            CategoryCode = 4L,
                            CategoryDescription = "Resim ve sanat malzemeleri.",
                            CategoryName = "Sanat Malzemeleri",
                            CreatedDate = new DateTime(2024, 9, 30, 19, 15, 52, 397, DateTimeKind.Local).AddTicks(4365),
                            Status = 1
                        },
                        new
                        {
                            CategoryCode = 5L,
                            CategoryDescription = "Farklı tür yapıştırıcılar.",
                            CategoryName = "Yapıştırıcılar",
                            CreatedDate = new DateTime(2024, 9, 30, 19, 15, 52, 397, DateTimeKind.Local).AddTicks(4366),
                            Status = 1
                        });
                });

            modelBuilder.Entity("Entities.Concrete.Order", b =>
                {
                    b.Property<long>("OrderCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("OrderCode"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("ShipperCode")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("UserCode")
                        .HasColumnType("bigint");

                    b.HasKey("OrderCode");

                    b.HasIndex("ShipperCode");

                    b.HasIndex("UserCode");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("Entities.Concrete.OrderDetail", b =>
                {
                    b.Property<long>("OrderDetailCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("OrderDetailCode"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("OrderCode")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("OrderDetailCode");

                    b.HasIndex("OrderCode");

                    b.ToTable("OrderDetail");
                });

            modelBuilder.Entity("Entities.Concrete.Product", b =>
                {
                    b.Property<long>("ProductCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ProductCode"));

                    b.Property<long>("CategoryCode")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("OrderDetailCode")
                        .HasColumnType("bigint");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<decimal>("ProductPrice")
                        .HasColumnType("numeric");

                    b.Property<int?>("ShipperCode")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("Stock")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("ProductCode");

                    b.HasIndex("CategoryCode");

                    b.HasIndex("OrderDetailCode");

                    b.HasIndex("ShipperCode");

                    b.ToTable("Product");

                    b.HasData(
                        new
                        {
                            ProductCode = 1L,
                            CategoryCode = 1L,
                            CreatedDate = new DateTime(2024, 9, 30, 19, 15, 52, 397, DateTimeKind.Local).AddTicks(4456),
                            ProductName = "Kurşun Kalem",
                            ProductPrice = 40m,
                            Status = 1,
                            Stock = 100
                        },
                        new
                        {
                            ProductCode = 2L,
                            CategoryCode = 1L,
                            CreatedDate = new DateTime(2024, 9, 30, 19, 15, 52, 397, DateTimeKind.Local).AddTicks(4463),
                            ProductName = "Mavi Renkli Kalem",
                            ProductPrice = 80m,
                            Status = 1,
                            Stock = 80
                        },
                        new
                        {
                            ProductCode = 3L,
                            CategoryCode = 1L,
                            CreatedDate = new DateTime(2024, 9, 30, 19, 15, 52, 397, DateTimeKind.Local).AddTicks(4464),
                            ProductName = "Kırmızı Jel Kalem",
                            ProductPrice = 90m,
                            Status = 1,
                            Stock = 60
                        },
                        new
                        {
                            ProductCode = 4L,
                            CategoryCode = 1L,
                            CreatedDate = new DateTime(2024, 9, 30, 19, 15, 52, 397, DateTimeKind.Local).AddTicks(4465),
                            ProductName = "Siyah Mürekkep Kalem",
                            ProductPrice = 100m,
                            Status = 1,
                            Stock = 40
                        },
                        new
                        {
                            ProductCode = 5L,
                            CategoryCode = 1L,
                            CreatedDate = new DateTime(2024, 9, 30, 19, 15, 52, 397, DateTimeKind.Local).AddTicks(4466),
                            ProductName = "Renkli Silgi",
                            ProductPrice = 25m,
                            Status = 1,
                            Stock = 120
                        },
                        new
                        {
                            ProductCode = 6L,
                            CategoryCode = 2L,
                            CreatedDate = new DateTime(2024, 9, 30, 19, 15, 52, 397, DateTimeKind.Local).AddTicks(4467),
                            ProductName = "A5 Kırmızı Defter",
                            ProductPrice = 150m,
                            Status = 1,
                            Stock = 200
                        },
                        new
                        {
                            ProductCode = 7L,
                            CategoryCode = 2L,
                            CreatedDate = new DateTime(2024, 9, 30, 19, 15, 52, 397, DateTimeKind.Local).AddTicks(4468),
                            ProductName = "A4 Beyaz Defter",
                            ProductPrice = 85m,
                            Status = 1,
                            Stock = 150
                        },
                        new
                        {
                            ProductCode = 8L,
                            CategoryCode = 2L,
                            CreatedDate = new DateTime(2024, 9, 30, 19, 15, 52, 397, DateTimeKind.Local).AddTicks(4469),
                            ProductName = "Kareli Defter",
                            ProductPrice = 120m,
                            Status = 1,
                            Stock = 100
                        },
                        new
                        {
                            ProductCode = 9L,
                            CategoryCode = 2L,
                            CreatedDate = new DateTime(2024, 9, 30, 19, 15, 52, 397, DateTimeKind.Local).AddTicks(4470),
                            ProductName = "Çizgili Defter",
                            ProductPrice = 120m,
                            Status = 1,
                            Stock = 90
                        },
                        new
                        {
                            ProductCode = 10L,
                            CategoryCode = 2L,
                            CreatedDate = new DateTime(2024, 9, 30, 19, 15, 52, 397, DateTimeKind.Local).AddTicks(4471),
                            ProductName = "Sert Kapaklı Defter",
                            ProductPrice = 160m,
                            Status = 1,
                            Stock = 50
                        },
                        new
                        {
                            ProductCode = 11L,
                            CategoryCode = 3L,
                            CreatedDate = new DateTime(2024, 9, 30, 19, 15, 52, 397, DateTimeKind.Local).AddTicks(4473),
                            ProductName = "Zımba Makinesi",
                            ProductPrice = 90m,
                            Status = 1,
                            Stock = 30
                        },
                        new
                        {
                            ProductCode = 12L,
                            CategoryCode = 3L,
                            CreatedDate = new DateTime(2024, 9, 30, 19, 15, 52, 397, DateTimeKind.Local).AddTicks(4474),
                            ProductName = "Bant Dispenseri",
                            ProductPrice = 45m,
                            Status = 1,
                            Stock = 70
                        },
                        new
                        {
                            ProductCode = 13L,
                            CategoryCode = 3L,
                            CreatedDate = new DateTime(2024, 9, 30, 19, 15, 52, 397, DateTimeKind.Local).AddTicks(4475),
                            ProductName = "Makas",
                            ProductPrice = 55m,
                            Status = 1,
                            Stock = 40
                        },
                        new
                        {
                            ProductCode = 14L,
                            CategoryCode = 3L,
                            CreatedDate = new DateTime(2024, 9, 30, 19, 15, 52, 397, DateTimeKind.Local).AddTicks(4476),
                            ProductName = "Post-it Notlar",
                            ProductPrice = 75m,
                            Status = 1,
                            Stock = 200
                        },
                        new
                        {
                            ProductCode = 15L,
                            CategoryCode = 3L,
                            CreatedDate = new DateTime(2024, 9, 30, 19, 15, 52, 397, DateTimeKind.Local).AddTicks(4477),
                            ProductName = "Kalemtraş",
                            ProductPrice = 20m,
                            Status = 1,
                            Stock = 100
                        },
                        new
                        {
                            ProductCode = 16L,
                            CategoryCode = 4L,
                            CreatedDate = new DateTime(2024, 9, 30, 19, 15, 52, 397, DateTimeKind.Local).AddTicks(4478),
                            ProductName = "Akrilik Boya Seti",
                            ProductPrice = 165m,
                            Status = 1,
                            Stock = 20
                        },
                        new
                        {
                            ProductCode = 17L,
                            CategoryCode = 4L,
                            CreatedDate = new DateTime(2024, 9, 30, 19, 15, 52, 397, DateTimeKind.Local).AddTicks(4479),
                            ProductName = "Su Renkleri Seti",
                            ProductPrice = 145m,
                            Status = 1,
                            Stock = 30
                        },
                        new
                        {
                            ProductCode = 18L,
                            CategoryCode = 4L,
                            CreatedDate = new DateTime(2024, 9, 30, 19, 15, 52, 397, DateTimeKind.Local).AddTicks(4480),
                            ProductName = "Fırça Seti",
                            ProductPrice = 110m,
                            Status = 1,
                            Stock = 25
                        },
                        new
                        {
                            ProductCode = 19L,
                            CategoryCode = 4L,
                            CreatedDate = new DateTime(2024, 9, 30, 19, 15, 52, 397, DateTimeKind.Local).AddTicks(4481),
                            ProductName = "Çizim Defteri",
                            ProductPrice = 85m,
                            Status = 1,
                            Stock = 40
                        },
                        new
                        {
                            ProductCode = 20L,
                            CategoryCode = 4L,
                            CreatedDate = new DateTime(2024, 9, 30, 19, 15, 52, 397, DateTimeKind.Local).AddTicks(4482),
                            ProductName = "Sanat Paleti",
                            ProductPrice = 55m,
                            Status = 1,
                            Stock = 50
                        },
                        new
                        {
                            ProductCode = 21L,
                            CategoryCode = 5L,
                            CreatedDate = new DateTime(2024, 9, 30, 19, 15, 52, 397, DateTimeKind.Local).AddTicks(4484),
                            ProductName = "Sıvı Yapıştırıcı",
                            ProductPrice = 35m,
                            Status = 1,
                            Stock = 60
                        },
                        new
                        {
                            ProductCode = 22L,
                            CategoryCode = 5L,
                            CreatedDate = new DateTime(2024, 9, 30, 19, 15, 52, 397, DateTimeKind.Local).AddTicks(4485),
                            ProductName = "Bantlı Yapıştırıcı",
                            ProductPrice = 30m,
                            Status = 1,
                            Stock = 90
                        },
                        new
                        {
                            ProductCode = 23L,
                            CategoryCode = 5L,
                            CreatedDate = new DateTime(2024, 9, 30, 19, 15, 52, 397, DateTimeKind.Local).AddTicks(4486),
                            ProductName = "Hot Melt Yapıştırıcı",
                            ProductPrice = 80m,
                            Status = 1,
                            Stock = 30
                        },
                        new
                        {
                            ProductCode = 24L,
                            CategoryCode = 5L,
                            CreatedDate = new DateTime(2024, 9, 30, 19, 15, 52, 397, DateTimeKind.Local).AddTicks(4487),
                            ProductName = "Yapıştırıcı Stik",
                            ProductPrice = 75m,
                            Status = 1,
                            Stock = 120
                        },
                        new
                        {
                            ProductCode = 25L,
                            CategoryCode = 5L,
                            CreatedDate = new DateTime(2024, 9, 30, 19, 15, 52, 397, DateTimeKind.Local).AddTicks(4488),
                            ProductName = "Modeller İçin Yapıştırıcı",
                            ProductPrice = 55m,
                            Status = 1,
                            Stock = 40
                        });
                });

            modelBuilder.Entity("Entities.Concrete.Shipper", b =>
                {
                    b.Property<int>("ShipperCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ShipperCode"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DeliveryTime")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<string>("ShipperName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("ShipperCode");

                    b.ToTable("Shipper");
                });

            modelBuilder.Entity("Entities.Entites.Concrete.User", b =>
                {
                    b.Property<long>("UserCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("UserCode"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MobilePhone")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("UserRoleCode")
                        .HasColumnType("bigint");

                    b.HasKey("UserCode");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("MobilePhone")
                        .IsUnique();

                    b.HasIndex("UserRoleCode");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            UserCode = 101L,
                            CreatedDate = new DateTime(2024, 9, 30, 19, 15, 52, 397, DateTimeKind.Local).AddTicks(4122),
                            Email = "john.doe@example.com",
                            MobilePhone = "+905551234567",
                            PasswordHash = new byte[] { 203, 245, 125, 216, 48, 215, 206, 163, 22, 181, 122, 102, 51, 28, 9, 190, 16, 236, 240, 1, 202, 54, 86, 216, 180, 105, 116, 205, 87, 236, 244, 246, 151, 9, 243, 97, 241, 221, 173, 34, 153, 33, 95, 111, 183, 94, 250, 182, 143, 107, 117, 123, 154, 128, 252, 155, 156, 0, 3, 133, 12, 74, 223, 15 },
                            PasswordSalt = new byte[] { 155, 140, 238, 112, 77, 92, 169, 94, 4, 92, 95, 249, 125, 0, 254, 120 },
                            Status = 1,
                            TwoFactorEnabled = false,
                            UserRoleCode = 1L
                        },
                        new
                        {
                            UserCode = 102L,
                            CreatedDate = new DateTime(2024, 9, 30, 19, 15, 52, 397, DateTimeKind.Local).AddTicks(4133),
                            Email = "jane.doe@example.com",
                            MobilePhone = "+905551234568",
                            PasswordHash = new byte[] { 203, 245, 125, 216, 48, 215, 206, 163, 22, 181, 122, 102, 51, 28, 9, 190, 16, 236, 240, 1, 202, 54, 86, 216, 180, 105, 116, 205, 87, 236, 244, 246, 151, 9, 243, 97, 241, 221, 173, 34, 153, 33, 95, 111, 183, 94, 250, 182, 143, 107, 117, 123, 154, 128, 252, 155, 156, 0, 3, 133, 12, 74, 223, 15 },
                            PasswordSalt = new byte[] { 155, 140, 238, 112, 77, 92, 169, 94, 4, 92, 95, 249, 125, 0, 254, 120 },
                            Status = 1,
                            TwoFactorEnabled = false,
                            UserRoleCode = 2L
                        },
                        new
                        {
                            UserCode = 103L,
                            CreatedDate = new DateTime(2024, 9, 30, 19, 15, 52, 397, DateTimeKind.Local).AddTicks(4135),
                            Email = "alice.smith@example.com",
                            MobilePhone = "+905551234569",
                            PasswordHash = new byte[] { 203, 245, 125, 216, 48, 215, 206, 163, 22, 181, 122, 102, 51, 28, 9, 190, 16, 236, 240, 1, 202, 54, 86, 216, 180, 105, 116, 205, 87, 236, 244, 246, 151, 9, 243, 97, 241, 221, 173, 34, 153, 33, 95, 111, 183, 94, 250, 182, 143, 107, 117, 123, 154, 128, 252, 155, 156, 0, 3, 133, 12, 74, 223, 15 },
                            PasswordSalt = new byte[] { 155, 140, 238, 112, 77, 92, 169, 94, 4, 92, 95, 249, 125, 0, 254, 120 },
                            Status = 1,
                            TwoFactorEnabled = false,
                            UserRoleCode = 3L
                        },
                        new
                        {
                            UserCode = 104L,
                            CreatedDate = new DateTime(2024, 9, 30, 19, 15, 52, 397, DateTimeKind.Local).AddTicks(4136),
                            Email = "bob.johnson@example.com",
                            MobilePhone = "+905551234570",
                            PasswordHash = new byte[] { 203, 245, 125, 216, 48, 215, 206, 163, 22, 181, 122, 102, 51, 28, 9, 190, 16, 236, 240, 1, 202, 54, 86, 216, 180, 105, 116, 205, 87, 236, 244, 246, 151, 9, 243, 97, 241, 221, 173, 34, 153, 33, 95, 111, 183, 94, 250, 182, 143, 107, 117, 123, 154, 128, 252, 155, 156, 0, 3, 133, 12, 74, 223, 15 },
                            PasswordSalt = new byte[] { 155, 140, 238, 112, 77, 92, 169, 94, 4, 92, 95, 249, 125, 0, 254, 120 },
                            Status = 1,
                            TwoFactorEnabled = false,
                            UserRoleCode = 3L
                        },
                        new
                        {
                            UserCode = 105L,
                            CreatedDate = new DateTime(2024, 9, 30, 19, 15, 52, 397, DateTimeKind.Local).AddTicks(4137),
                            Email = "carol.davis@example.com",
                            MobilePhone = "+905551234571",
                            PasswordHash = new byte[] { 203, 245, 125, 216, 48, 215, 206, 163, 22, 181, 122, 102, 51, 28, 9, 190, 16, 236, 240, 1, 202, 54, 86, 216, 180, 105, 116, 205, 87, 236, 244, 246, 151, 9, 243, 97, 241, 221, 173, 34, 153, 33, 95, 111, 183, 94, 250, 182, 143, 107, 117, 123, 154, 128, 252, 155, 156, 0, 3, 133, 12, 74, 223, 15 },
                            PasswordSalt = new byte[] { 155, 140, 238, 112, 77, 92, 169, 94, 4, 92, 95, 249, 125, 0, 254, 120 },
                            Status = 1,
                            TwoFactorEnabled = false,
                            UserRoleCode = 3L
                        });
                });

            modelBuilder.Entity("Entities.Entites.Concrete.UserDetail", b =>
                {
                    b.Property<long>("UserDetailCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("UserDetailCode"));

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IdentityNumber")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("character varying(11)");

                    b.Property<string>("MobilePhone")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("UserCode")
                        .HasColumnType("bigint");

                    b.HasKey("UserDetailCode");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("IdentityNumber")
                        .IsUnique();

                    b.HasIndex("UserCode")
                        .IsUnique();

                    b.ToTable("UserDetail");

                    b.HasData(
                        new
                        {
                            UserDetailCode = 1L,
                            BirthDate = new DateTime(1990, 6, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2024, 9, 30, 19, 15, 52, 396, DateTimeKind.Local).AddTicks(3841),
                            Email = "ahmet.yilmaz@kirtasiyemerkezi.com",
                            IdentityNumber = "98765432101",
                            MobilePhone = "+905551234567",
                            Name = "Ahmet",
                            Status = 1,
                            Surname = "Yılmaz",
                            UserCode = 101L
                        },
                        new
                        {
                            UserDetailCode = 2L,
                            BirthDate = new DateTime(1990, 6, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2024, 9, 30, 19, 15, 52, 396, DateTimeKind.Local).AddTicks(3863),
                            Email = "mehmet.demir@ofismalzemeleri.com",
                            IdentityNumber = "98765432102",
                            MobilePhone = "+905551234568",
                            Name = "Mehmet",
                            Status = 1,
                            Surname = "Demir",
                            UserCode = 102L
                        },
                        new
                        {
                            UserDetailCode = 3L,
                            BirthDate = new DateTime(1990, 6, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2024, 9, 30, 19, 15, 52, 396, DateTimeKind.Local).AddTicks(3865),
                            Email = "ayse.kaya@kirtasiyedunyasi.com",
                            IdentityNumber = "98765432103",
                            MobilePhone = "+905551234569",
                            Name = "Ayşe",
                            Status = 1,
                            Surname = "Kaya",
                            UserCode = 103L
                        },
                        new
                        {
                            UserDetailCode = 4L,
                            BirthDate = new DateTime(1990, 6, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2024, 9, 30, 19, 15, 52, 396, DateTimeKind.Local).AddTicks(3896),
                            Email = "ali.celik@ofismerkezi.com",
                            IdentityNumber = "98765432104",
                            MobilePhone = "+905551234570",
                            Name = "Ali",
                            Status = 1,
                            Surname = "Çelik",
                            UserCode = 104L
                        },
                        new
                        {
                            UserDetailCode = 5L,
                            BirthDate = new DateTime(1990, 6, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2024, 9, 30, 19, 15, 52, 396, DateTimeKind.Local).AddTicks(3897),
                            Email = "fatma.yurt@kirtasiyevi.com",
                            IdentityNumber = "98765432105",
                            MobilePhone = "+905551234571",
                            Name = "Fatma",
                            Status = 1,
                            Surname = "Yurt",
                            UserCode = 105L
                        });
                });

            modelBuilder.Entity("Entities.Entites.Concrete.UserRole", b =>
                {
                    b.Property<long>("UserRoleCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("UserRoleCode"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("RoleDescription")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("UserCode")
                        .HasColumnType("bigint");

                    b.HasKey("UserRoleCode");

                    b.HasIndex("UserCode");

                    b.ToTable("UserRole");

                    b.HasData(
                        new
                        {
                            UserRoleCode = 1L,
                            CreatedDate = new DateTime(2024, 9, 30, 19, 15, 52, 396, DateTimeKind.Local).AddTicks(4082),
                            RoleDescription = "Admin",
                            Status = 1
                        },
                        new
                        {
                            UserRoleCode = 2L,
                            CreatedDate = new DateTime(2024, 9, 30, 19, 15, 52, 396, DateTimeKind.Local).AddTicks(4085),
                            RoleDescription = "Yönetici",
                            Status = 1
                        },
                        new
                        {
                            UserRoleCode = 3L,
                            CreatedDate = new DateTime(2024, 9, 30, 19, 15, 52, 396, DateTimeKind.Local).AddTicks(4086),
                            RoleDescription = "Kullanici",
                            Status = 1
                        });
                });

            modelBuilder.Entity("Entities.Concrete.Order", b =>
                {
                    b.HasOne("Entities.Concrete.Shipper", "Shipper")
                        .WithMany("Orders")
                        .HasForeignKey("ShipperCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Entites.Concrete.User", "User")
                        .WithMany()
                        .HasForeignKey("UserCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Shipper");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.Concrete.OrderDetail", b =>
                {
                    b.HasOne("Entities.Concrete.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Entities.Concrete.Product", b =>
                {
                    b.HasOne("Entities.Concrete.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Concrete.OrderDetail", null)
                        .WithMany("Products")
                        .HasForeignKey("OrderDetailCode");

                    b.HasOne("Entities.Concrete.Shipper", null)
                        .WithMany("Products")
                        .HasForeignKey("ShipperCode");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Entities.Entites.Concrete.User", b =>
                {
                    b.HasOne("Entities.Entites.Concrete.UserRole", "UserRole")
                        .WithMany("Users")
                        .HasForeignKey("UserRoleCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserRole");
                });

            modelBuilder.Entity("Entities.Entites.Concrete.UserDetail", b =>
                {
                    b.HasOne("Entities.Entites.Concrete.User", "User")
                        .WithOne("UserDetail")
                        .HasForeignKey("Entities.Entites.Concrete.UserDetail", "UserCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.Entites.Concrete.UserRole", b =>
                {
                    b.HasOne("Entities.Entites.Concrete.User", null)
                        .WithMany("UserRoles")
                        .HasForeignKey("UserCode");
                });

            modelBuilder.Entity("Entities.Concrete.OrderDetail", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Entities.Concrete.Shipper", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("Entities.Entites.Concrete.User", b =>
                {
                    b.Navigation("UserDetail")
                        .IsRequired();

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Entities.Entites.Concrete.UserRole", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
